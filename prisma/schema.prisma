datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String @id @unique @default(cuid())
  name     String
  username String @unique
  email    String @unique
  role     String @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  dorseler Dorse[]

  girisler  Giris[]
  cikislar  Cikis[]
  gumrukler Gumruk[]
  image     UserImage?
  roleId    String?
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Dorse {
  id         String       @id @unique @default(cuid())
  plaka      String       @unique
  firma      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId     String
  girisler   Giris[]
  DorseImage DorseImage[]
}

model DorseImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dorse   Dorse  @relation(fields: [dorseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dorseId String

  // non-unique foreign key
  @@index([dorseId])
}

model Giris {
  id        String   @id @unique @default(cuid())
  getiren   String
  dorse     Dorse    @relation(fields: [dorseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dorseId   String
  yuk       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId    String
  gumruk    Gumruk?
  cikis     Cikis?
}

model Cikis {
  id        String   @id @unique @default(cuid())
  goturen   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  giris     Giris    @relation(fields: [girisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  girisId   String   @unique
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId    String
}

model Gumruk {
  id        String   @id @unique @default(cuid())
  kayit     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  giris     Giris?   @relation(fields: [girisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  girisId   String   @unique
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId    String
}
